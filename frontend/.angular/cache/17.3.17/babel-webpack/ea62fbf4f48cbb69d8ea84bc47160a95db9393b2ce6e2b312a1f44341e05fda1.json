{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class IssueService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000';\n  }\n  getIssues(search, status, priority, assignee, sortBy, sortOrder, page, pageSize) {\n    let params = new HttpParams();\n    if (search) params = params.set('search', search);\n    if (status) params = params.set('status', status);\n    if (priority) params = params.set('priority', priority);\n    if (assignee) params = params.set('assignee', assignee);\n    if (sortBy) params = params.set('sortBy', sortBy);\n    if (sortOrder) params = params.set('sortOrder', sortOrder);\n    if (page) params = params.set('page', page.toString());\n    if (pageSize) params = params.set('pageSize', pageSize.toString());\n    return this.http.get(`${this.apiUrl}/issues`, {\n      params\n    });\n  }\n  getIssue(id) {\n    return this.http.get(`${this.apiUrl}/issues/${id}`);\n  }\n  createIssue(issue) {\n    return this.http.post(`${this.apiUrl}/issues`, issue);\n  }\n  updateIssue(id, issue) {\n    return this.http.put(`${this.apiUrl}/issues/${id}`, issue);\n  }\n  checkHealth() {\n    return this.http.get(`${this.apiUrl}/health`);\n  }\n  static {\n    this.ɵfac = function IssueService_Factory(t) {\n      return new (t || IssueService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: IssueService,\n      factory: IssueService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","IssueService","constructor","http","apiUrl","getIssues","search","status","priority","assignee","sortBy","sortOrder","page","pageSize","params","set","toString","get","getIssue","id","createIssue","issue","post","updateIssue","put","checkHealth","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Assignment\\Securigeek\\frontend\\src\\app\\services\\issue.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Issue, IssuesResponse, CreateIssueRequest, UpdateIssueRequest } from '../models/issue.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IssueService {\r\n  private apiUrl = 'http://localhost:5000';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getIssues(\r\n    search?: string,\r\n    status?: string,\r\n    priority?: string,\r\n    assignee?: string,\r\n    sortBy?: string,\r\n    sortOrder?: string,\r\n    page?: number,\r\n    pageSize?: number\r\n  ): Observable<IssuesResponse> {\r\n    let params = new HttpParams();\r\n    \r\n    if (search) params = params.set('search', search);\r\n    if (status) params = params.set('status', status);\r\n    if (priority) params = params.set('priority', priority);\r\n    if (assignee) params = params.set('assignee', assignee);\r\n    if (sortBy) params = params.set('sortBy', sortBy);\r\n    if (sortOrder) params = params.set('sortOrder', sortOrder);\r\n    if (page) params = params.set('page', page.toString());\r\n    if (pageSize) params = params.set('pageSize', pageSize.toString());\r\n\r\n    return this.http.get<IssuesResponse>(`${this.apiUrl}/issues`, { params });\r\n  }\r\n\r\n  getIssue(id: string): Observable<Issue> {\r\n    return this.http.get<Issue>(`${this.apiUrl}/issues/${id}`);\r\n  }\r\n\r\n  createIssue(issue: CreateIssueRequest): Observable<Issue> {\r\n    return this.http.post<Issue>(`${this.apiUrl}/issues`, issue);\r\n  }\r\n\r\n  updateIssue(id: string, issue: UpdateIssueRequest): Observable<Issue> {\r\n    return this.http.put<Issue>(`${this.apiUrl}/issues/${id}`, issue);\r\n  }\r\n\r\n  checkHealth(): Observable<{status: string}> {\r\n    return this.http.get<{status: string}>(`${this.apiUrl}/health`);\r\n  }\r\n}"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAED;EAEvCC,SAASA,CACPC,MAAe,EACfC,MAAe,EACfC,QAAiB,EACjBC,QAAiB,EACjBC,MAAe,EACfC,SAAkB,EAClBC,IAAa,EACbC,QAAiB;IAEjB,IAAIC,MAAM,GAAG,IAAId,UAAU,EAAE;IAE7B,IAAIM,MAAM,EAAEQ,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAET,MAAM,CAAC;IACjD,IAAIC,MAAM,EAAEO,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAER,MAAM,CAAC;IACjD,IAAIC,QAAQ,EAAEM,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,UAAU,EAAEP,QAAQ,CAAC;IACvD,IAAIC,QAAQ,EAAEK,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,UAAU,EAAEN,QAAQ,CAAC;IACvD,IAAIC,MAAM,EAAEI,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEL,MAAM,CAAC;IACjD,IAAIC,SAAS,EAAEG,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,WAAW,EAAEJ,SAAS,CAAC;IAC1D,IAAIC,IAAI,EAAEE,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,MAAM,EAAEH,IAAI,CAACI,QAAQ,EAAE,CAAC;IACtD,IAAIH,QAAQ,EAAEC,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAACG,QAAQ,EAAE,CAAC;IAElE,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAiB,GAAG,IAAI,CAACb,MAAM,SAAS,EAAE;MAAEU;IAAM,CAAE,CAAC;EAC3E;EAEAI,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAQ,GAAG,IAAI,CAACb,MAAM,WAAWe,EAAE,EAAE,CAAC;EAC5D;EAEAC,WAAWA,CAACC,KAAyB;IACnC,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAQ,GAAG,IAAI,CAAClB,MAAM,SAAS,EAAEiB,KAAK,CAAC;EAC9D;EAEAE,WAAWA,CAACJ,EAAU,EAAEE,KAAyB;IAC/C,OAAO,IAAI,CAAClB,IAAI,CAACqB,GAAG,CAAQ,GAAG,IAAI,CAACpB,MAAM,WAAWe,EAAE,EAAE,EAAEE,KAAK,CAAC;EACnE;EAEAI,WAAWA,CAAA;IACT,OAAO,IAAI,CAACtB,IAAI,CAACc,GAAG,CAAmB,GAAG,IAAI,CAACb,MAAM,SAAS,CAAC;EACjE;;;uBA3CWH,YAAY,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZ5B,YAAY;MAAA6B,OAAA,EAAZ7B,YAAY,CAAA8B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}